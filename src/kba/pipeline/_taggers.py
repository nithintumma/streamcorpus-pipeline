

import os
import time
import subprocess
import exceptions

from streamcorpus import Chunk
from ._clean_visible import make_clean_visible_file

class TaggerBatchTransform(object):
    '''
    kba.pipeline.TaggerBatchTransform provides a structure for
    aligning a taggers output with labels and generating
    stream_item.sentences[tagger_id] = [Sentence]
    '''
    template = None

    def __init__(self, config):
        self.config = config

    def __call__(self, chunk_path):
        ## make temporary file paths based on chunk_path
        clean_visible_path = chunk_path + '-clean_visible.xml'
        ner_xml_path       = chunk_path + '-ner.xml'

        ## process the chunk's clean_visible data into xml
        i_chunk = Chunk(path=chunk_path, mode='rb')
        make_clean_visible_file(i_chunk, clean_visible_path)

        ## generate an output file from the tagger
        self.make_ner_file(clean_visible_path, ner_xml_path)

        ## make a new output chunk at a temporary path
        tmp_chunk_path     = chunk_path + '_'
        o_chunk = Chunk(path=tmp_chunk_path, mode='wb')

        ## fuse the output file with i_chunk to make o_chunk
        self.align_chunk_with_ner(ner_xml_path, i_chunk, o_chunk)

        ## clean up temp files
        os.remove(clean_visible_path)
        os.remove(ner_xml_path)

        ## atomic rename new chunk file into place
        os.rename(tmp_chunk_path, chunk_path)

    ## gets called by self.__call__
    def make_ner_file(self, clean_visible_path, ner_xml_path):
        '''run tagger a child process to get XML output'''
        if self.template is None:
            raise exceptions.NotImplementedError('''
Subclasses must specify a class property "template" that provides
command string format for running a tagger.  It should take
%(pipeline_root)s as the path from the config file,
%(clean_visible_path)s as the input XML file, and %(ner_xml_path)s as
the output path to create.
''')
        cmd = self.template % dict(
            pipeline_root=self.config['pipeline_root'],
            clean_visible_path=clean_visible_path,
            ner_xml_path=ner_xml_path)
        #print cmd
        start_time = time.time()
        gpg_child = subprocess.Popen(cmd, stderr=subprocess.PIPE, shell=True)
        s_out, errors = gpg_child.communicate()
        assert gpg_child.returncode == 0 and 'Exception' not in errors, errors
        elapsed = time.time() - start_time
        return elapsed
        #print '%.1f sec --> %.1f StreamItems/second' % (elapsed, rate)

    def align_chunk_with_ner(ner_xml_path, i_chunk, o_chunk):
        '''Must be overriden by subclasses.

Takes a path to an XML file of output generated by this tagger, the
original input chunk from which that clean_visible data was extracted,
and a new chunk into which this function should insert StreamItems.
        '''
        raise exceptions.NotImplementedError

